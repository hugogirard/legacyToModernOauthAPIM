<policies>
    <inbound>
        <base />
        <cache-lookup-value key="@("bearerToken")" variable-name="bearerToken" />
        <choose>
            <when condition="@(!context.Variables.ContainsKey("bearerToken"))">
                <send-request mode="new" response-variable-name="accessTokenResult" timeout="20" ignore-error="true">
                    <set-url>{{idpTokenEndpoint}}</set-url>
                    <set-method>POST</set-method>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/x-www-form-urlencoded</value>
                    </set-header>
                    <set-body>@{
                            var xmlDocument = new XmlDocument();

                            // Load SOAP message
                            xmlDocument.LoadXml(context.Request.Body.As<string>());
                            var root = xmlDocument.DocumentElement;
                            var username = root.GetElementsByTagName("o:Username");
                            var password = root.GetElementsByTagName("o:Password");
                            
                            // Compose the form encoded body
                            var sb = new StringBuilder();
                            
                            sb.Append("client_id={{clientId}}&");
                            sb.Append("username=" + username[0].InnerText + "&");
                            sb.Append("password=" + password[0].InnerText + "&");
                            sb.Append("scope={{scope}}&");
                            sb.Append("client_secret={{clientSecret}}&");
                            sb.Append("grant_type=password");

                            return sb.ToString();                            
                    }</set-body>
                </send-request>
                <set-variable name="accessToken" value="@(((IResponse)context.Variables["accessTokenResult"]).Body.As<JObject>())" />
                <set-variable name="bearerToken" value="@((string)((JObject)context.Variables["accessToken"])["access_token"])" />
                <set-variable name="tokenDurationSeconds" value="@((int)((JObject)context.Variables["accessToken"])["expires_in"])" />
                <cache-store-value key="bearerToken" value="@((string)context.Variables["bearerToken"])" duration="@((int)context.Variables["tokenDurationSeconds"])" />                
            </when>
        </choose>
        <set-header name="Authorization" exists-action="override">
            <value>@("Bearer " + (string)context.Variables["bearerToken"])</value>
        </set-header>
        <!--  Don't expose APIM subscription key to the backend. -->
        <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />        
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <choose>
            <when condition="@(context.Response.StatusCode == 401 || context.Response.StatusCode == 403)">
                <cache-remove-value key="bearerToken" />
            </when>
        </choose>    
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>